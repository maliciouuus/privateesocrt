"""
Django settings for escortdollars project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from decimal import Decimal

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "django-insecure-dev-key-change-in-production")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Configuration des hôtes autorisés
ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "192.168.1.60",
    "*",
    ".ngrok.io",
    ".ngrok-free.app",
]

# Domaine principal
MAIN_DOMAIN = "escortdollars.com"

# Clé API pour les références externes
EXTERNAL_API_KEY = "your-secure-api-key-here"  # À changer en production

# Payment Platform Configuration

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.humanize",
    # Third party apps
    "allauth",
    "allauth.account",
    "rest_framework",
    "crispy_forms",
    "crispy_bootstrap5",
    # Local apps - Apps essentielles du projet
    "apps.accounts",  # Gestion des comptes utilisateurs
    "apps.affiliate",  # Module d'affiliation principal (essentiel)
    "apps.dashboard",  # Tableau de bord utilisateur (essentiel)
    "apps.whitelabel",  # Module des sites en marque blanche (essentiel)
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "apps.affiliate.middleware.AffiliateMiddleware",
    "apps.affiliate.middleware.ReferralMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": False,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "loaders": [
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("dbname", "postgres"),
        "USER": os.getenv("user", "postgres"),
        "PASSWORD": os.getenv("password", ""),
        "HOST": os.getenv("host", "localhost"),
        "PORT": os.getenv("port", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "fr-fr"

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Auth settings
AUTH_USER_MODEL = "accounts.User"
LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/dashboard/simple_dashboard/"
LOGOUT_REDIRECT_URL = "/"

# Django Allauth Config
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

SITE_ID = 1

# Allauth settings
ACCOUNT_LOGIN_METHODS = {"username", "email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "username*", "password1*", "password2*"]
ACCOUNT_RATE_LIMITS = {
    "login": "5/m",
    "signup": "3/m",
    "reset_password": "3/m",
}

ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_EMAIL_VERIFICATION = "none"  # Désactive la vérification par email
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
ACCOUNT_ADAPTER = "apps.accounts.adapters.CustomAccountAdapter"
ACCOUNT_SIGNUP_ENABLED = True

# URLs d'allauth
ACCOUNT_LOGOUT_REDIRECT_URL = "/"
ACCOUNT_LOGIN_REDIRECT_URL = "/dashboard/simple_dashboard/"
ACCOUNT_SIGNUP_REDIRECT_URL = "/dashboard/simple_dashboard/"

# Email configuration
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
DEFAULT_FROM_EMAIL = "noreply@escortdollars.com"
EMAIL_SUBJECT_PREFIX = "[EscortDollars] "

# Telegram Bot configuration
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_BOT_USERNAME = "EscortDollarsBot"
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID", "")

# Configuration du système d'affiliation
AFFILIATE_REF_PARAM = "ref"  # Paramètre d'URL pour les codes d'affiliation
AFFILIATE_COOKIE_NAME = "affiliate_code"  # Nom du cookie
AFFILIATE_COOKIE_AGE = 60 * 60 * 24 * 30  # Durée du cookie (30 jours)
AFFILIATE_FIRST_TOUCH = True

# NOUVELLES OPTIONS pour l'affiliation
AFFILIATE_NOTIFICATION_MAX_RETRIES = 3  # Nombre max de tentatives pour envoyer une notification
AFFILIATE_FORCE_UPDATE_REFERRER = False  # Si True, autorise le changement de parrain
AFFILIATE_ALLOW_NON_AMBASSADOR_REFERRER = True  # Si True, permet aux non-ambassadeurs de parrainer
AFFILIATE_DEBUG_MODE = True  # Si True, active les logs détaillés pour le système d'affiliation
AFFILIATE_SIGNUP_BONUS = Decimal(
    "10.00"
)  # Montant de la commission pour l'inscription d'un ambassadeur

# Crispy forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Supabase Configuration
SUPABASE_URL = os.environ.get("SUPABASE_URL", "")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY", "")

# Configuration des logs
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "logs/affiliate.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "affiliate": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": True,
        },
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
}

# Swagger settings
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {"Token": {"type": "apiKey", "name": "Authorization", "in": "header"}},
    "USE_SESSION_AUTH": True,
}

# CoinPayments Configuration
COINPAYMENTS_API_KEY = os.environ.get("COINPAYMENTS_API_KEY")
COINPAYMENTS_API_SECRET = os.environ.get("COINPAYMENTS_API_SECRET")
COINPAYMENTS_IPN_SECRET = os.environ.get("COINPAYMENTS_IPN_SECRET")
COINPAYMENTS_IPN_URL = os.environ.get(
    "COINPAYMENTS_IPN_URL", "https://escortdollars.com/webhooks/coinpayments/"
)
COINPAYMENTS_SUCCESS_URL = os.environ.get(
    "COINPAYMENTS_SUCCESS_URL", "https://escortdollars.com/payment/success/"
)
COINPAYMENTS_CANCEL_URL = os.environ.get(
    "COINPAYMENTS_CANCEL_URL", "https://escortdollars.com/payment/cancel/"
)
