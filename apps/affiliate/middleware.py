from django.utils.deprecation import MiddlewareMixin
from django.conf import settings
import logging
from apps.accounts.models import User
from django.utils.timezone import now

logger = logging.getLogger(__name__)
logger_audit = logging.getLogger("affiliate.audit")


class AffiliateMiddleware(MiddlewareMixin):
    """
    Middleware qui capture les codes d'affiliation et les stocke dans un cookie persistant.
    Le cookie est conserv√© pendant 30 jours pour maximiser les chances de conversion,
    m√™me si l'utilisateur revient apr√®s plusieurs jours.
    """

    def process_request(self, request):
        # Configuration
        REF_PARAM = getattr(settings, "AFFILIATE_REF_PARAM", "ref")
        COOKIE_NAME = getattr(settings, "AFFILIATE_COOKIE_NAME", "affiliate_code")
        # Dur√©e explicite de 30 jours en secondes (2 592 000 secondes)
        COOKIE_AGE = getattr(
            settings, "AFFILIATE_COOKIE_AGE", 60 * 60 * 24 * 30
        )  # 30 jours par d√©faut
        AFFILIATE_FIRST_TOUCH = getattr(
            settings, "AFFILIATE_FIRST_TOUCH", True
        )  # Conserver le premier affiliateur

        # AM√âLIORATION: Logging plus d√©taill√© des param√®tres d'URL pour le d√©bogage
        full_path = request.get_full_path()
        if "?" in full_path:
            logger.info(f"üì• URL avec param√®tres: {full_path}")
            # Journaliser de mani√®re plus d√©taill√©e chaque param√®tre (utile pour debug)
            for key, value in request.GET.items():
                logger.info(f"üìù Param√®tre URL: {key}={value}")

        # V√©rifier s'il y a un code de r√©f√©rence dans l'URL
        ref_code = request.GET.get(REF_PARAM)

        if ref_code:
            # AM√âLIORATION: V√©rification de la validit√© du code
            try:
                referrer = User.objects.get(referral_code=ref_code)
                logger.info(
                    f"‚úÖ Code de r√©f√©rence valide dans l'URL: {ref_code} (Utilisateur: {referrer.username})"
                )
                is_valid = True
            except User.DoesNotExist:
                logger.warning(f"‚ùå Code de r√©f√©rence invalide dans l'URL: {ref_code}")
                is_valid = False
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la v√©rification du code de r√©f√©rence: {str(e)}")
                is_valid = False

            # Continuer uniquement si le code est valide
            if is_valid:
                # Ajouter le code √† l'objet request pour faciliter l'acc√®s
                request.affiliate_code = ref_code

                # V√©rifier si nous respectons le "first touch" (premier contact)
                cookie_ref_code = request.COOKIES.get(COOKIE_NAME)
                if cookie_ref_code and AFFILIATE_FIRST_TOUCH:
                    logger.info(
                        f"‚ÑπÔ∏è Cookie existant trouv√©: {cookie_ref_code}, respectant 'first touch'"
                    )
                    request.affiliate_code = cookie_ref_code
                    return

                # AM√âLIORATION: Ajout de m√©ta-donn√©es suppl√©mentaires
                request._affiliate_meta = {
                    "referrer_username": referrer.username,
                    "referrer_id": referrer.id,
                    "source": "url_param",
                    "timestamp": request.META.get("REQUEST_TIME", 0),
                }

                # D√©finir un cookie qui sera plac√© dans la r√©ponse
                request._affiliate_cookie_to_set = {
                    "name": COOKIE_NAME,
                    "value": ref_code,
                    "max_age": COOKIE_AGE,
                    "secure": request.is_secure(),
                    "httponly": True,
                    "samesite": "Lax",  # Permet le suivi lors d'une redirection depuis un site externe
                    "expires": None,  # Laissez Django calculer la date d'expiration √† partir de max_age
                }
        else:
            # AM√âLIORATION: R√©cup√©rer le code depuis le cookie avec validation
            cookie_ref_code = request.COOKIES.get(COOKIE_NAME)
            if cookie_ref_code:
                # V√©rifier si le code dans le cookie est toujours valide
                try:
                    referrer = User.objects.get(referral_code=cookie_ref_code)
                    logger.info(
                        f"‚úÖ Code de r√©f√©rence valide dans le cookie: {cookie_ref_code} (Utilisateur: {referrer.username})"
                    )
                    request.affiliate_code = cookie_ref_code

                    # AM√âLIORATION: Ajout de m√©ta-donn√©es suppl√©mentaires
                    request._affiliate_meta = {
                        "referrer_username": referrer.username,
                        "referrer_id": referrer.id,
                        "source": "cookie",
                        "timestamp": request.META.get("REQUEST_TIME", 0),
                    }
                except User.DoesNotExist:
                    logger.warning(
                        f"‚ùå Code de r√©f√©rence invalide dans le cookie: {cookie_ref_code}"
                    )
                    request.affiliate_code = None
                except Exception as e:
                    logger.error(
                        f"‚ùå Erreur lors de la v√©rification du code de r√©f√©rence dans le cookie: {str(e)}"
                    )
                    request.affiliate_code = None
            else:
                logger.debug(f"‚ÑπÔ∏è Aucun code de r√©f√©rence trouv√© (ni URL, ni cookie)")
                request.affiliate_code = None

    def process_response(self, request, response):
        # AM√âLIORATION: Gestion plus robuste du cookie avec logging d√©taill√©
        if hasattr(request, "_affiliate_cookie_to_set"):
            cookie_data = request._affiliate_cookie_to_set
            logger.info(f"üç™ D√©finition du cookie d'affiliation: {cookie_data['value']}")

            # D√©finir le cookie pour la dur√©e sp√©cifi√©e
            try:
                response.set_cookie(
                    cookie_data["name"],
                    cookie_data["value"],
                    max_age=cookie_data["max_age"],
                    secure=cookie_data["secure"],
                    httponly=cookie_data["httponly"],
                    samesite=cookie_data["samesite"],
                )
                logger.info(f"‚úÖ Cookie d'affiliation d√©fini avec succ√®s: {cookie_data['value']}")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la d√©finition du cookie d'affiliation: {str(e)}")

        return response


class ReferralMiddleware(MiddlewareMixin):
    def process_request(self, request):
        # Ne pas traiter les requ√™tes pour les fichiers statiques
        if request.path.startswith("/static/"):
            return None

        # R√©cup√©rer le code de r√©f√©rence de l'URL ou du cookie
        ref_code = request.GET.get("ref") or request.COOKIES.get("ref_code")

        if ref_code:
            # Si un code est trouv√©, on le stocke dans la session
            request.session["ref_code"] = ref_code
            logger.debug(f"‚úÖ Code de r√©f√©rence trouv√© : {ref_code}")
        else:
            # Ne pas logger pour les requ√™tes statiques ou les assets
            if not any(request.path.startswith(p) for p in ["/static/", "/media/", "/favicon.ico"]):
                logger.debug("‚ÑπÔ∏è Aucun code de r√©f√©rence trouv√©")

        return None

    def process_response(self, request, response):
        # Si un code de r√©f√©rence est trouv√© dans l'URL, on le stocke dans un cookie
        ref_code = request.GET.get("ref")
        if ref_code:
            # D√©finir le cookie pour 30 jours
            response.set_cookie("ref_code", ref_code, max_age=30 * 24 * 60 * 60)
        return response


SENSITIVE_PATHS = [
    "/admin/",
    "/api/commission-rates/",
    "/api/payouts/mark_paid/",
    "/api/white-labels/",
]


class AuditLogMiddleware(MiddlewareMixin):
    def process_view(self, request, view_func, view_args, view_kwargs):
        path = request.path
        if any(path.startswith(p) for p in SENSITIVE_PATHS):
            user = getattr(request, "user", None)
            username = user.username if user and user.is_authenticated else "anonymous"
            method = request.method
            data = request.POST.dict() if method in ["POST", "PUT"] else {}
            logger_audit.info(
                f"[AUDIT] {now()} | User: {username} | Method: {method} | Path: {path} | Data: {data}"
            )
        return None
